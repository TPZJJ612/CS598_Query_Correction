import copy, http.client, urllib.request, urllib.parse, urllib.error, base64, requests, json
from collections import OrderedDict


class QueryChecker:
    def __init__(self, key):
        self.substitution = {}
        self.reversal = {}
        self.deletion = {}
        self.insertion = {}
        self.bigram = {}
        self.WORDS = set(line.strip() for line in open('words.txt'))
        self.headers = {'Content-Type': 'application/json','Ocp-Apim-Subscription-Key': key}
        self.params = urllib.parse.urlencode({'model': 'body','order': 5})
        self.conn = http.client.HTTPSConnection('api.projectoxford.ai')
        self.setup()

    def __del__(self):
        self.conn.close()
        
    def setup(self):
#        with open ('bigrams', 'r') as f:
#            for line in f:
#                vals = line.split('@@')
#                self.bigram[vals[0]] = float(vals[1])

        self.substitution["a"] = {"a":0, "b":0, "c":0.0115, "d":0.0016, "e":0.5607, "f":0, "g":0, "h":0.0033, "i":0.1934, "j":0, "k":0.0016, "l":0, "m":0, "n":0.0049, "o":0.1246, "p":0, "q":0, "r":0.0016, "s":0.0574, "t":0.0148, "u":0.0148, "v":0, "w":0.0016, "x":0, "y":0.0082, "z":0}
        self.substitution["b"] = {"a":0, "b":0, "c":0.1324, "d":0.1324, "e":0.0294, "f":0.0294, "g":0.0441, "h":0.0147, "i":0, "j":0, "k":0, "l":0.0735, "m":0.1618, "n":0.0735, "o":0, "p":0.1471, "q":0, "r":0, "s":0.0294, "t":0.0147, "u":0, "v":0, "w":0.1176, "x":0, "y":0, "z":0}
        self.substitution["c"] = {"a":0.0357, "b":0.0298, "c":0, "d":0.0952, "e":0, "f":0.0536, "g":0.0298, "h":0, "i":0, "j":0, "k":0.0060, "l":0, "m":0.0417, "n":0.0536, "o":0.0060, "p":0.0595, "q":0.0119, "r":0.0298, "s":0.2321, "t":0.2381, "u":0.0060, "v":0.0179, "w":0.0417, "x":0.0060, "y":0.0060, "z":0}
        self.substitution["d"] = {"a":0.0061, "b":0.0613, "c":0.0798, "d":0, "e":0.0736, "f":0, "g":0.0307, "h":0.0307, "i":0, "j":0, "k":0.0123, "l":0.0184, "m":0.0429, "n":0.0184, "o":0, "p":0.0061, "q":0, "r":0.2638, "s":0.1840, "t":0.1350, "u":0, "v":0, "w":0.0245, "x":0, "y":0.0123, "z":0}
        self.substitution["e"] = {"a":0.5861, "b":0, "c":0.0045, "d":0.0166, "e":0, "f":0.0030, "g":0.0030, "h":0, "i":0.1344, "j":0, "k":0, "l":0.0045, "m":0, "n":0.0076, "o":0.1405, "p":0, "q":0, "r":0.0211, "s":0.0181, "t":0.0091, "u":0.0227, "v":0, "w":0.0015, "x":0, "y":0.0272, "z":0}
        self.substitution["f"] = {"a":0, "b":0.2586, "c":0, "d":0.0517, "e":0.0172, "f":0, "g":0.0862, "h":0.0345, "i":0, "j":0, "k":0, "l":0.0517, "m":0.0690, "n":0.0172, "o":0, "p":0, "q":0, "r":0.1034, "s":0.0690, "t":0.2069, "u":0, "v":0, "w":0.0345, "x":0, "y":0, "z":0}
        self.substitution["g"] = {"a":0.0435, "b":0.0109, "c":0.1196, "d":0.1196, "e":0.0978, "f":0.0217, "g":0, "h":0, "i":0, "j":0.0109, "k":0.0109, "l":0.0326, "m":0, "n":0, "o":0.0217, "p":0.0109, "q":0.0326, "r":0.0543, "s":0.1413, "t":0.2283, "u":0, "v":0, "w":0.0109, "x":0, "y":0.0326, "z":0}
        self.substitution["h"] = {"a":0.0161, "b":0.1290, "c":0, "d":0.0484, "e":0, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0.0323, "l":0, "m":0.1935, "n":0.2258, "o":0.0323, "p":0.0484, "q":0, "r":0.0484, "s":0.0161, "t":0.1774, "u":0, "v":0, "w":0.0323, "x":0, "y":0, "z":0}
        self.substitution["i"] = {"a":0.2761, "b":0, "c":0, "d":0, "e":0.3914, "f":0, "g":0.0027, "h":0, "i":0, "j":0, "k":0, "l":0.0161, "m":0, "n":0, "o":0.1314, "p":0, "q":0, "r":0, "s":0.0054, "t":0.0027, "u":0.1260, "v":0, "w":0.0054, "x":0.0027, "y":0.0402, "z":0}
        self.substitution["j"] = {"a":0, "b":0.0500, "c":0.0500, "d":0.4500, "e":0, "f":0, "g":0.0500, "h":0, "i":0, "j":0, "k":0, "l":0.1000, "m":0.0500, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0.2500, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.substitution["k"] = {"a":0.0227, "b":0.0455, "c":0.1818, "d":0.0909, "e":0.0227, "f":0.0227, "g":0.0455, "h":0.1136, "i":0, "j":0, "k":0, "l":0, "m":0.1136, "n":0, "o":0.0455, "p":0, "q":0, "r":0, "s":0.1364, "t":0, "u":0, "v":0, "w":0.0909, "x":0, "y":0, "z":0.0682}
        self.substitution["l"] = {"a":0.0222, "b":0.1111, "c":0.0111, "d":0.0444, "e":0, "f":0.0444, "g":0.0556, "h":0.0667, "i":0.1444, "j":0, "k":0.0111, "l":0, "m":0, "n":0.1556, "o":0.0222, "p":0.0556, "q":0, "r":0.1222, "s":0.1111, "t":0.0222, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.substitution["m"] = {"a":0.0037, "b":0.0112, "c":0.0261, "d":0.0299, "e":0, "f":0.0075, "g":0, "h":0.0224, "i":0, "j":0, "k":0.0149, "l":0.0149, "m":0, "n":0.6716, "o":0, "p":0.0224, "q":0, "r":0, "s":0.0336, "t":0.0560, "u":0.0485, "v":0.0112, "w":0.0075, "x":0.0075, "y":0.0112, "z":0}
        self.substitution["n"] = {"a":0.0094, "b":0.0329, "c":0.0282, "d":0.0235, "e":0.0141, "f":0, "g":0.0047, "h":0.0892, "i":0.0047, "j":0, "k":0.0188, "l":0.1643, "m":0.3662, "n":0, "o":0, "p":0.0329, "q":0, "r":0.1315, "s":0.0235, "t":0.0329, "u":0, "v":0, "w":0.0047, "x":0.0094, "y":0, "z":0.0094}
        self.substitution["o"] = {"a":0.3527, "b":0.0039, "c":0.0039, "d":0.1202, "e":0.0620, "f":0, "g":0, "h":0, "i":0.0969, "j":0, "k":0.0078, "l":0, "m":0, "n":0, "o":0, "p":0.0543, "q":0, "r":0.0078, "s":0.0155, "t":0.0543, "u":0.1512, "v":0, "w":0, "x":0, "y":0.0698, "z":0}
        self.substitution["p"] = {"a":0, "b":0.1358, "c":0.0123, "d":0.0247, "e":0, "f":0.0741, "g":0.0617, "h":0, "i":0.0247, "j":0.1111, "k":0, "l":0.0247, "m":0.0864, "n":0.0741, "o":0.1852, "p":0, "q":0, "r":0.0123, "s":0.0370, "t":0.0741, "u":0, "v":0.0494, "w":0.0123, "x":0, "y":0, "z":0}
        self.substitution["q"] = {"a":0, "b":0, "c":0.0357, "d":0, "e":0, "f":0, "g":0.9643, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.substitution["r"] = {"a":0, "b":0.0870, "c":0, "d":0.1863, "e":0.0745, "f":0.0124, "g":0.0124, "h":0.0497, "i":0.0124, "j":0, "k":0.0311, "l":0.0497, "m":0.0248, "n":0.1242, "o":0.0062, "p":0.0870, "q":0, "r":0, "s":0.0745, "t":0.1366, "u":0.0248, "v":0, "w":0, "x":0.0062, "y":0, "z":0}
        self.substitution["s"] = {"a":0.0502, "b":0.0365, "c":0.1233, "d":0.1507, "e":0.1598, "f":0.0183, "g":0, "h":0.0046, "i":0, "j":0.0046, "k":0, "l":0.1233, "m":0, "n":0.0274, "o":0.0046, "p":0.0320, "q":0, "r":0.0639, "s":0, "t":0.0685, "u":0, "v":0, "w":0.0228, "x":0.0137, "y":0.0913, "z":0.0046}
        self.substitution["t"] = {"a":0.0139, "b":0.0185, "c":0.0417, "d":0.1944, "e":0.0324, "f":0.0231, "g":0.0880, "h":0.0231, "i":0, "j":0.0046, "k":0, "l":0.0648, "m":0.0417, "n":0.0231, "o":0.0231, "p":0.0278, "q":0, "r":0.0509, "s":0.1713, "t":0, "u":0, "v":0.0093, "w":0.0880, "x":0, "y":0.0324, "z":0.0278}
        self.substitution["u"] = {"a":0.1070, "b":0, "c":0, "d":0, "e":0.2353, "f":0, "g":0, "h":0, "i":0.3422, "j":0, "k":0, "l":0, "m":0, "n":0.0107, "o":0.2299, "p":0, "q":0, "r":0.0214, "s":0, "t":0, "u":0, "v":0, "w":0.0107, "x":0, "y":0.0428, "z":0}
        self.substitution["v"] = {"a":0, "b":0, "c":0.3043, "d":0, "e":0, "f":0.1304, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0.0435, "m":0, "n":0, "o":0.0435, "p":0, "q":0, "r":0, "s":0.3478, "t":0.1304, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.substitution["w"] = {"a":0.0690, "b":0.0690, "c":0.0345, "d":0, "e":0.0345, "f":0, "g":0, "h":0.0690, "i":0, "j":0, "k":0.0345, "l":0, "m":0, "n":0, "o":0, "p":0.2414, "q":0, "r":0.2069, "s":0.1034, "t":0.1034, "u":0.0345, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.substitution["x"] = {"a":0, "b":0, "c":0, "d":0.1818, "e":0, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0.8182, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.substitution["y"] = {"a":0, "b":0, "c":0.0189, "d":0, "e":0.1415, "f":0, "g":0.0094, "h":0.0660, "i":0.1415, "j":0, "k":0, "l":0, "m":0.0189, "n":0, "o":0.0566, "p":0.0094, "q":0, "r":0.0660, "s":0.3396, "t":0.0755, "u":0.0472, "v":0, "w":0, "x":0.0094, "y":0, "z":0}
        self.substitution["z"] = {"a":0, "b":0, "c":0, "d":0.1458, "e":0, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0.1458, "m":0.1042, "n":0, "o":0, "p":0, "q":0, "r":0.0417, "s":0.4375, "t":0.0625, "u":0, "v":0, "w":0, "x":0, "y":0.0625, "z":0}

        self.reversal["a"] = {"a":0, "b":0, "c":0.0137, "d":0.0068, "e":0.0068, "f":0, "g":0, "h":0, "i":0.1301, "j":0, "k":0.0068, "l":0.0959, "m":0.0274, "n":0.1712, "o":0.0685, "p":0.0205, "q":0, "r":0.1849, "s":0.0205, "t":0.0342, "u":0.2123, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["b"] = {"a":0, "b":0, "c":0, "d":0, "e":0.2500, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0.1250, "m":0.1250, "n":0, "o":0.2500, "p":0, "q":0, "r":0, "s":0.2500, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["c"] = {"a":0, "b":0, "c":0, "d":0, "e":0.0080, "f":0, "g":0, "h":0.0080, "i":0.6800, "j":0, "k":0, "l":0.1200, "m":0, "n":0, "o":0.1040, "p":0, "q":0, "r":0, "s":0.0240, "t":0, "u":0.0560, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["d"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0, "i":0.7000, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0.1000, "s":0, "t":0, "u":0.2000, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["e"] = {"a":0.0040, "b":0, "c":0.0162, "d":0.0202, "e":0, "f":0, "g":0, "h":0, "i":0.2429, "j":0, "k":0, "l":0.0850, "m":0.0243, "n":0.0648, "o":0.0445, "p":0.0081, "q":0, "r":0.1174, "s":0.0202, "t":0, "u":0.3441, "v":0, "w":0, "x":0, "y":0.0081, "z":0}
        self.reversal["f"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0, "i":0.9231, "j":0, "k":0, "l":0.0769, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["g"] = {"a":0.1429, "b":0, "c":0, "d":0, "e":0.0714, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0.0357, "m":0, "n":0.5357, "o":0, "p":0, "q":0, "r":0.1071, "s":0, "t":0, "u":0.1071, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["h"] = {"a":0.3243, "b":0, "c":0, "d":0, "e":0.4054, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0.2703, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["i"] = {"a":0.0595, "b":0.0317, "c":0.1230, "d":0.0119, "e":0.2619, "f":0.0040, "g":0.0119, "h":0, "i":0, "j":0, "k":0, "l":0.0357, "m":0, "n":0.0198, "o":0.0437, "p":0, "q":0.0040, "r":0.0516, "s":0.1667, "t":0.1389, "u":0, "v":0.0238, "w":0, "x":0, "y":0, "z":0.0119}
        self.reversal["j"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["k"] = {"a":0, "b":0, "c":0, "d":0, "e":1.0000, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["l"] = {"a":0.1507, "b":0, "c":0, "d":0.1644, "e":0.2740, "f":0, "g":0.0137, "h":0, "i":0.0548, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0.0137, "p":0.0411, "q":0, "r":0, "s":0.0137, "t":0.0137, "u":0.0411, "v":0.1233, "w":0, "x":0, "y":0.0959, "z":0}
        self.reversal["m"] = {"a":0.2571, "b":0, "c":0, "d":0, "e":0.5714, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0.0571, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0.1143, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["n"] = {"a":0.2632, "b":0, "c":0.1053, "d":0.0351, "e":0.2105, "f":0, "g":0.1404, "h":0, "i":0.0175, "j":0, "k":0, "l":0, "m":0.0526, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0.1053, "t":0.0702, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["o"] = {"a":0.1136, "b":0, "c":0.0455, "d":0, "e":0.0909, "f":0, "g":0, "h":0, "i":0.1136, "j":0, "k":0, "l":0.0227, "m":0, "n":0.1136, "o":0, "p":0.0227, "q":0, "r":0.2500, "s":0.0227, "t":0.0227, "u":0, "v":0, "w":0.1591, "x":0.0227, "y":0, "z":0}
        self.reversal["p"] = {"a":0.4595, "b":0, "c":0, "d":0, "e":0.1081, "f":0, "g":0, "h":0.0270, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0.0270, "p":0, "q":0, "r":0.1351, "s":0.0811, "t":0.1622, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["q"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["r"] = {"a":0.1101, "b":0, "c":0, "d":0, "e":0.2202, "f":0, "g":0.0275, "h":0, "i":0.1284, "j":0, "k":0.0183, "l":0.0183, "m":0, "n":0.0642, "o":0.2752, "p":0.0092, "q":0, "r":0, "s":0, "t":0.0183, "u":0.0917, "v":0, "w":0, "x":0, "y":0.0183, "z":0}
        self.reversal["s"] = {"a":0.0482, "b":0, "c":0, "d":0, "e":0.1084, "f":0, "g":0, "h":0.0602, "i":0.1807, "j":0, "k":0, "l":0.0602, "m":0.0241, "n":0, "o":0.0120, "p":0.2651, "q":0, "r":0, "s":0, "t":0.0120, "u":0.0361, "v":0, "w":0, "x":0, "y":0.1928, "z":0}
        self.reversal["t"] = {"a":0.0377, "b":0, "c":0.0283, "d":0, "e":0.0377, "f":0, "g":0, "h":0.1981, "i":0.4623, "j":0, "k":0, "l":0.0377, "m":0, "n":0, "o":0.0283, "p":0, "q":0, "r":0.0472, "s":0, "t":0, "u":0.1038, "v":0, "w":0.0189, "x":0, "y":0, "z":0}
        self.reversal["u"] = {"a":0.2683, "b":0, "c":0.0610, "d":0.0122, "e":0.0122, "f":0, "g":0.0244, "h":0, "i":0.0244, "j":0, "k":0, "l":0.0244, "m":0.0122, "n":0, "o":0.2439, "p":0.0244, "q":0, "r":0.1341, "s":0.1341, "t":0.0244, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["v"] = {"a":0, "b":0, "c":0, "d":0, "e":0.2000, "f":0, "g":0, "h":0, "i":0.8000, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["w"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0.2667, "i":0, "j":0, "k":0, "l":0, "m":0.0667, "n":0.0667, "o":0.0667, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0.5333, "z":0}
        self.reversal["x"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":1.0000, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["y"] = {"a":0, "b":0.0500, "c":0.1000, "d":0, "e":0, "f":0, "g":0.0500, "h":0, "i":0, "j":0, "k":0, "l":0.1500, "m":0, "n":0, "o":0, "p":0.1000, "q":0, "r":0.0500, "s":0.5000, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.reversal["z"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}

        self.insertion["a"] = {"a":0, "b":0.0130, "c":0.1076, "d":0.0390, "e":0.0056, "f":0.0093, "g":0.0334, "h":0.0148, "i":0.1132, "j":0, "k":0.0074, "l":0.0798, "m":0.0093, "n":0.0983, "o":0, "p":0.0167, "q":0, "r":0.1818, "s":0.0519, "t":0.0983, "u":0.1150, "v":0.0019, "w":0, "x":0, "y":0.0037, "z":0}
        self.insertion["b"] = {"a":0.0075, "b":0.0075, "c":0.0037, "d":0, "e":0.0821, "f":0, "g":0, "h":0, "i":0.6828, "j":0, "k":0, "l":0.0970, "m":0, "n":0, "o":0.0075, "p":0, "q":0, "r":0.0224, "s":0.0634, "t":0, "u":0.0224, "v":0.0037, "w":0, "x":0, "y":0, "z":0}
        self.insertion["c"] = {"a":0.0531, "b":0, "c":0.1004, "d":0, "e":0.0904, "f":0, "g":0, "h":0.0344, "i":0.4591, "j":0, "k":0.0129, "l":0.0244, "m":0, "n":0, "o":0.0473, "p":0, "q":0, "r":0.0660, "s":0.0086, "t":0.0775, "u":0.0244, "v":0, "w":0, "x":0, "y":0.0014, "z":0}
        self.insertion["d"] = {"a":0.0588, "b":0, "c":0.0343, "d":0.1225, "e":0.2206, "f":0, "g":0.0490, "h":0, "i":0.3039, "j":0.0049, "k":0.0049, "l":0.0392, "m":0.0196, "n":0.0147, "o":0.0147, "p":0, "q":0, "r":0.0539, "s":0.0049, "t":0, "u":0.0147, "v":0.0098, "w":0, "x":0, "y":0.0294, "z":0}
        self.insertion["e"] = {"a":0.0830, "b":0.0010, "c":0.0519, "d":0.0768, "e":0.0923, "f":0.0031, "g":0.0010, "h":0.0010, "i":0.0062, "j":0, "k":0, "l":0.0332, "m":0.0093, "n":0.0788, "o":0.0197, "p":0.0093, "q":0.0010, "r":0.2459, "s":0.2313, "t":0.0353, "u":0.0083, "v":0.0021, "w":0.0010, "x":0.0073, "y":0.0010, "z":0}
        self.insertion["f"] = {"a":0.0223, "b":0, "c":0, "d":0, "e":0.0726, "f":0.2570, "g":0, "h":0, "i":0.4413, "j":0, "k":0, "l":0.0670, "m":0, "n":0, "o":0.0223, "p":0, "q":0, "r":0.0615, "s":0, "t":0.0447, "u":0.0056, "v":0, "w":0, "x":0, "y":0.0056, "z":0}
        self.insertion["g"] = {"a":0.0755, "b":0, "c":0, "d":0.0060, "e":0.2508, "f":0.0030, "g":0.1118, "h":0.0755, "i":0.1178, "j":0, "k":0, "l":0.0091, "m":0, "n":0.0876, "o":0.0121, "p":0, "q":0, "r":0.1571, "s":0.0211, "t":0.0030, "u":0.0665, "v":0, "w":0, "x":0, "y":0.0030, "z":0}
        self.insertion["h"] = {"a":0.0820, "b":0.0656, "c":0.0055, "d":0.0164, "e":0.1093, "f":0, "g":0, "h":0.1366, "i":0.1311, "j":0, "k":0, "l":0.0383, "m":0.0055, "n":0.0492, "o":0.1202, "p":0, "q":0, "r":0.0820, "s":0.0055, "t":0.1421, "u":0, "v":0, "w":0.0055, "x":0, "y":0.0055, "z":0}
        self.insertion["i"] = {"a":0.0531, "b":0.0020, "c":0.1224, "d":0.0531, "e":0.0469, "f":0.0020, "g":0.0184, "h":0, "i":0.0020, "j":0, "k":0, "l":0.0776, "m":0.0286, "n":0.1673, "o":0.0837, "p":0.0143, "q":0, "r":0.0327, "s":0.1449, "t":0.1306, "u":0.0020, "v":0.0020, "w":0, "x":0, "y":0.0020, "z":0.0143}
        self.insertion["j"] = {"a":0, "b":0, "c":0, "d":0, "e":0.2500, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0.2500, "o":0.2500, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0.2500, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.insertion["k"] = {"a":0.0635, "b":0, "c":0, "d":0.0159, "e":0.2381, "f":0.0159, "g":0.1270, "h":0.0159, "i":0.0794, "j":0, "k":0.0159, "l":0.0476, "m":0, "n":0.2698, "o":0, "p":0, "q":0, "r":0.0159, "s":0.0794, "t":0, "u":0, "v":0, "w":0.0159, "x":0, "y":0, "z":0}
        self.insertion["l"] = {"a":0.0417, "b":0, "c":0.0017, "d":0.0104, "e":0.0835, "f":0, "g":0, "h":0, "i":0.3774, "j":0, "k":0, "l":0.3670, "m":0.0035, "n":0, "o":0.0504, "p":0, "q":0, "r":0.0035, "s":0.0209, "t":0.0122, "u":0.0052, "v":0.0035, "w":0, "x":0, "y":0.0191, "z":0}
        self.insertion["m"] = {"a":0.0442, "b":0.0295, "c":0, "d":0, "e":0.0973, "f":0, "g":0, "h":0.0029, "i":0.1239, "j":0, "k":0, "l":0, "m":0.5310, "n":0.0206, "o":0.0206, "p":0.0914, "q":0, "r":0, "s":0.0265, "t":0, "u":0.0118, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.insertion["n"] = {"a":0.0211, "b":0, "c":0.0421, "d":0.0712, "e":0.0682, "f":0.0010, "g":0.1605, "h":0, "i":0.1916, "j":0, "k":0, "l":0, "m":0.0171, "n":0.1444, "o":0.0211, "p":0, "q":0, "r":0, "s":0.1274, "t":0.0873, "u":0.0431, "v":0.0010, "w":0.0010, "x":0, "y":0.0020, "z":0}
        self.insertion["o"] = {"a":0.0301, "b":0.0109, "c":0.0082, "d":0.0164, "e":0.0219, "f":0, "g":0.0137, "h":0, "i":0.0109, "j":0.0027, "k":0, "l":0.0355, "m":0.0246, "n":0.1913, "o":0.0710, "p":0.0546, "q":0, "r":0.2678, "s":0.0546, "t":0.0355, "u":0.1284, "v":0.0055, "w":0.0137, "x":0, "y":0.0027, "z":0}
        self.insertion["p"] = {"a":0.0820, "b":0, "c":0, "d":0, "e":0.0721, "f":0, "g":0, "h":0.0393, "i":0.0492, "j":0, "k":0, "l":0.0918, "m":0.0033, "n":0, "o":0.0984, "p":0.3049, "q":0, "r":0.1902, "s":0.0033, "t":0.0590, "u":0.0066, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.insertion["q"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":1.0000, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.insertion["r"] = {"a":0.0551, "b":0.0035, "c":0.0105, "d":0.0166, "e":0.1645, "f":0, "g":0.0096, "h":0.0044, "i":0.1155, "j":0, "k":0.0026, "l":0.0289, "m":0.0061, "n":0.1374, "o":0.0184, "p":0.0017, "q":0, "r":0.2423, "s":0.0901, "t":0.0595, "u":0, "v":0.0087, "w":0.0009, "x":0, "y":0.0236, "z":0}
        self.insertion["s"] = {"a":0.0189, "b":0, "c":0.0320, "d":0, "e":0.0876, "f":0.0012, "g":0, "h":0.0213, "i":0.2734, "j":0, "k":0, "l":0.0024, "m":0.0012, "n":0, "o":0.0355, "p":0.0355, "q":0, "r":0.0047, "s":0.3136, "t":0.1467, "u":0.0249, "v":0, "w":0, "x":0, "y":0.0012, "z":0}
        self.insertion["t"] = {"a":0.0240, "b":0.0010, "c":0.0020, "d":0, "e":0.0759, "f":0.0010, "g":0.0070, "h":0.0490, "i":0.4266, "j":0, "k":0, "l":0.0310, "m":0.0030, "n":0.0030, "o":0.0110, "p":0.0010, "q":0, "r":0.2028, "s":0.0050, "t":0.1369, "u":0.0140, "v":0, "w":0.0040, "x":0, "y":0.0020, "z":0}
        self.insertion["u"] = {"a":0.0547, "b":0.0126, "c":0.0189, "d":0.0211, "e":0.0316, "f":0, "g":0.0021, "h":0, "i":0.0589, "j":0, "k":0, "l":0.0821, "m":0.0042, "n":0.2337, "o":0.0021, "p":0, "q":0, "r":0.2716, "s":0.0653, "t":0.1389, "u":0, "v":0, "w":0, "x":0, "y":0.0021, "z":0}
        self.insertion["v"] = {"a":0.0882, "b":0, "c":0, "d":0, "e":0.5686, "f":0, "g":0, "h":0, "i":0.3039, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0.0196, "p":0, "q":0, "r":0.0098, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0.0098, "z":0}
        self.insertion["w"] = {"a":0.3636, "b":0, "c":0, "d":0.0091, "e":0.1000, "f":0.0091, "g":0, "h":0.1000, "i":0.1364, "j":0, "k":0, "l":0.0091, "m":0, "n":0.0182, "o":0.0182, "p":0, "q":0, "r":0.0182, "s":0.2182, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.insertion["x"] = {"a":0.0294, "b":0, "c":0.5000, "d":0, "e":0.0882, "f":0, "g":0, "h":0.0294, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0.1765, "q":0, "r":0, "s":0, "t":0.1471, "u":0, "v":0, "w":0, "x":0, "y":0.0294, "z":0}
        self.insertion["y"] = {"a":0.0303, "b":0.0152, "c":0.5152, "d":0, "e":0.0303, "f":0, "g":0.0152, "h":0, "i":0.0152, "j":0, "k":0, "l":0.0152, "m":0.0303, "n":0.0152, "o":0.0152, "p":0.0152, "q":0, "r":0, "s":0.2576, "t":0.0152, "u":0, "v":0, "w":0.0152, "x":0, "y":0, "z":0}
        self.insertion["z"] = {"a":0.2000, "b":0, "c":0, "d":0, "e":0.4000, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0, "z":0.4000}
        self.insertion["@"] = {"a":0.0585, "b":0.0409, "c":0.1199, "d":0.0906, "e":0.0585, "f":0.0585, "g":0.0205, "h":0.0175, "i":0.0585, "j":0.0088, "k":0.0175, "l":0.0643, "m":0.0468, "n":0.0146, "o":0.0146, "p":0.0497, "q":0, "r":0.0819, "s":0.0760, "t":0.0175, "u":0.0058, "v":0.0029, "w":0.0702, "x":0, "y":0, "z":0.0058}

        self.deletion["a"] = {"a":0.0393, "b":0.0026, "c":0.0366, "d":0.0183, "e":0.0262, "f":0, "g":0.0026, "h":0.0026, "i":0.0864, "j":0.0026, "k":0.0105, "l":0.0812, "m":0.0052, "n":0.1021, "o":0.0314, "p":0.0105, "q":0.0079, "r":0.0733, "s":0.3508, "t":0.0183, "u":0.0733, "v":0, "w":0.0026, "x":0.0026, "y":0.0105, "z":0.0026}
        self.deletion["b"] = {"a":0.0265, "b":0.0973, "c":0, "d":0, "e":0.0619, "f":0, "g":0.0088, "h":0, "i":0.4425, "j":0, "k":0, "l":0.1327, "m":0, "n":0.0088, "o":0.0088, "p":0, "q":0, "r":0.0442, "s":0.1416, "t":0, "u":0, "v":0.0265, "w":0, "x":0, "y":0, "z":0}
        self.deletion["c"] = {"a":0.0860, "b":0, "c":0.2443, "d":0.0045, "e":0.0588, "f":0, "g":0, "h":0.0814, "i":0.2262, "j":0, "k":0.0136, "l":0.0045, "m":0.0045, "n":0.0045, "o":0.0317, "p":0.0045, "q":0, "r":0.0317, "s":0.1131, "t":0.0317, "u":0.0362, "v":0.0181, "w":0, "x":0.0045, "y":0, "z":0}
        self.deletion["d"] = {"a":0.0811, "b":0, "c":0.0135, "d":0.0766, "e":0.0631, "f":0.0090, "g":0, "h":0, "i":0.0405, "j":0, "k":0, "l":0.0270, "m":0.0045, "n":0.0405, "o":0.0586, "p":0, "q":0, "r":0.0270, "s":0.5360, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0.0225, "z":0}
        self.deletion["e"] = {"a":0.0456, "b":0.0023, "c":0.0093, "d":0.0888, "e":0.1717, "f":0.0023, "g":0, "h":0.0012, "i":0.0047, "j":0, "k":0.0035, "l":0.0047, "m":0.0070, "n":0.0315, "o":0.0058, "p":0.0012, "q":0, "r":0.0970, "s":0.4871, "t":0.0070, "u":0.0047, "v":0.0012, "w":0.0117, "x":0.0023, "y":0.0093, "z":0}
        self.deletion["f"] = {"a":0.0120, "b":0, "c":0, "d":0, "e":0.0241, "f":0.3253, "g":0.0120, "h":0, "i":0.1446, "j":0, "k":0, "l":0.1205, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0.0602, "s":0.2771, "t":0, "u":0.0120, "v":0, "w":0, "x":0, "y":0.0120, "z":0}
        self.deletion["g"] = {"a":0.0645, "b":0, "c":0, "d":0, "e":0.0403, "f":0.0081, "g":0.0403, "h":0.0968, "i":0.0645, "j":0, "k":0, "l":0.0161, "m":0, "n":0.0081, "o":0.0081, "p":0, "q":0.0081, "r":0.0403, "s":0.5565, "t":0.0161, "u":0.0242, "v":0, "w":0.0081, "x":0, "y":0, "z":0}
        self.deletion["h"] = {"a":0.0260, "b":0.0065, "c":0, "d":0.0065, "e":0.1558, "f":0, "g":0.0649, "h":0.1169, "i":0.1104, "j":0.0130, "k":0, "l":0.0065, "m":0, "n":0.0065, "o":0.0260, "p":0, "q":0, "r":0.1039, "s":0.1558, "t":0.1429, "u":0.0065, "v":0, "w":0.0325, "x":0, "y":0.0195, "z":0}
        self.deletion["i"] = {"a":0.0325, "b":0.0097, "c":0.0422, "d":0.0422, "e":0.0812, "f":0, "g":0.0032, "h":0.0032, "i":0.2240, "j":0.0065, "k":0.0032, "l":0.0552, "m":0.0357, "n":0.1071, "o":0.0877, "p":0.0032, "q":0, "r":0.0292, "s":0.0974, "t":0.0942, "u":0.0357, "v":0, "w":0, "x":0.0032, "y":0, "z":0.0032}
        self.deletion["j"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0, "i":0, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":1.0000, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.deletion["k"] = {"a":0.0163, "b":0.0325, "c":0, "d":0.0081, "e":0.0732, "f":0, "g":0, "h":0.0081, "i":0.0081, "j":0, "k":0.0081, "l":0.0081, "m":0, "n":0, "o":0.0163, "p":0.0081, "q":0, "r":0, "s":0.7724, "t":0, "u":0.0081, "v":0, "w":0, "x":0, "y":0.0325, "z":0}
        self.deletion["l"] = {"a":0.0081, "b":0.0027, "c":0, "d":0.0027, "e":0.1027, "f":0, "g":0, "h":0, "i":0.2135, "j":0, "k":0.0054, "l":0.3459, "m":0.0027, "n":0, "o":0.0189, "p":0, "q":0, "r":0, "s":0.2622, "t":0.0189, "u":0.0081, "v":0.0027, "w":0, "x":0, "y":0.0054, "z":0}
        self.deletion["m"] = {"a":0.0451, "b":0.0041, "c":0.0041, "d":0, "e":0.0697, "f":0, "g":0, "h":0.0041, "i":0.0246, "j":0, "k":0.0041, "l":0, "m":0.4180, "n":0.1803, "o":0.0287, "p":0.0082, "q":0, "r":0, "s":0.1926, "t":0.0041, "u":0.0082, "v":0, "w":0.0041, "x":0, "y":0, "z":0}
        self.deletion["n"] = {"a":0.0300, "b":0.0100, "c":0.0140, "d":0.0260, "e":0.1040, "f":0.0080, "g":0.0340, "h":0, "i":0.0680, "j":0, "k":0.0020, "l":0.0020, "m":0.0520, "n":0.1980, "o":0.0240, "p":0, "q":0, "r":0.0040, "s":0.3120, "t":0.1060, "u":0.0020, "v":0.0020, "w":0, "x":0, "y":0.0020, "z":0}
        self.deletion["o"] = {"a":0.0509, "b":0.0036, "c":0.0036, "d":0.0109, "e":0.0255, "f":0.0073, "g":0.0036, "h":0, "i":0.1018, "j":0.0036, "k":0, "l":0.0218, "m":0.0109, "n":0.0473, "o":0.2327, "p":0.1091, "q":0, "r":0.0582, "s":0.2145, "t":0.0145, "u":0.0691, "v":0.0036, "w":0, "x":0, "y":0.0036, "z":0.0036}
        self.deletion["p"] = {"a":0.0924, "b":0, "c":0.0040, "d":0.0040, "e":0.0402, "f":0, "g":0, "h":0.0803, "i":0.0120, "j":0, "k":0, "l":0.0080, "m":0, "n":0, "o":0.1044, "p":0.2811, "q":0, "r":0.1165, "s":0.2088, "t":0.0361, "u":0.0040, "v":0.0040, "w":0.0040, "x":0, "y":0, "z":0}
        self.deletion["q"] = {"a":0, "b":0, "c":0, "d":0, "e":0, "f":0, "g":0, "h":0, "i":0.5000, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0.5000, "v":0, "w":0, "x":0, "y":0, "z":0}
        self.deletion["r"] = {"a":0.0228, "b":0.0030, "c":0.0015, "d":0, "e":0.1353, "f":0.0015, "g":0.0015, "h":0.0030, "i":0.0973, "j":0, "k":0, "l":0.0076, "m":0.0137, "n":0.0106, "o":0.0152, "p":0, "q":0, "r":0.2006, "s":0.4149, "t":0.0441, "u":0.0106, "v":0, "w":0.0015, "x":0, "y":0.0152, "z":0}
        self.deletion["s"] = {"a":0.0246, "b":0.0019, "c":0.0132, "d":0.0378, "e":0.0775, "f":0, "g":0.0019, "h":0.0945, "i":0.1909, "j":0, "k":0.0038, "l":0.0038, "m":0.0189, "n":0.0132, "o":0.0057, "p":0.0019, "q":0, "r":0.0019, "s":0.3875, "t":0.0926, "u":0.0132, "v":0, "w":0.0019, "x":0, "y":0.0132, "z":0}
        self.deletion["t"] = {"a":0.0514, "b":0, "c":0, "d":0.0040, "e":0.0856, "f":0.0013, "g":0.0132, "h":0.0316, "i":0.0777, "j":0.0013, "k":0, "l":0.0079, "m":0.0040, "n":0.0013, "o":0.0303, "p":0.0013, "q":0, "r":0.0711, "s":0.3478, "t":0.2411, "u":0.0145, "v":0, "w":0.0066, "x":0, "y":0.0079, "z":0}
        self.deletion["u"] = {"a":0.0754, "b":0, "c":0.0151, "d":0, "e":0.0452, "f":0, "g":0, "h":0.0050, "i":0.1206, "j":0.0050, "k":0.0050, "l":0.0151, "m":0.0151, "n":0.0452, "o":0.0050, "p":0.0151, "q":0, "r":0.2462, "s":0.0955, "t":0.1357, "u":0.1307, "v":0, "w":0, "x":0.0101, "y":0.0151, "z":0}
        self.deletion["v"] = {"a":0, "b":0.0345, "c":0, "d":0, "e":0.6207, "f":0, "g":0, "h":0, "i":0.1724, "j":0, "k":0, "l":0.0172, "m":0, "n":0.0172, "o":0, "p":0.0172, "q":0, "r":0, "s":0, "t":0, "u":0.0172, "v":0.0862, "w":0.0172, "x":0, "y":0, "z":0}
        self.deletion["w"] = {"a":0, "b":0, "c":0, "d":0.0303, "e":0.3030, "f":0, "g":0, "h":0.0303, "i":0.0303, "j":0, "k":0.0303, "l":0.0303, "m":0, "n":0.0606, "o":0, "p":0, "q":0.0303, "r":0.0303, "s":0.2424, "t":0, "u":0.0606, "v":0, "w":0.1212, "x":0, "y":0, "z":0}
        self.deletion["x"] = {"a":0, "b":0, "c":0.5455, "d":0, "e":0.0303, "f":0, "g":0, "h":0.1818, "i":0.0303, "j":0, "k":0, "l":0, "m":0.0303, "n":0, "o":0.0909, "p":0, "q":0, "r":0, "s":0.0606, "t":0, "u":0, "v":0, "w":0, "x":0.0303, "y":0, "z":0}
        self.deletion["y"] = {"a":0.0694, "b":0.0139, "c":0.0278, "d":0, "e":0.0417, "f":0, "g":0, "h":0, "i":0.0278, "j":0, "k":0, "l":0.0139, "m":0.0139, "n":0.0833, "o":0, "p":0, "q":0, "r":0.0139, "s":0.4583, "t":0.0139, "u":0.1806, "v":0, "w":0.0139, "x":0, "y":0.0278, "z":0}
        self.deletion["z"] = {"a":0.1000, "b":0, "c":0, "d":0, "e":0.2500, "f":0.0500, "g":0, "h":0, "i":0.3000, "j":0, "k":0, "l":0, "m":0, "n":0, "o":0, "p":0, "q":0, "r":0, "s":0, "t":0, "u":0, "v":0, "w":0, "x":0, "y":0.1000, "z":0.2000}
        self.deletion["@"] = {"a":0.2072, "b":0.0360, "c":0.0405, "d":0.0360, "e":0.1171, "f":0.0495, "g":0.0631, "h":0.0135, "i":0.0225, "j":0.0045, "k":0.0766, "l":0.0225, "m":0.0270, "n":0.0090, "o":0.0090, "p":0.0450, "q":0, "r":0.0270, "s":0.1036, "t":0.0090, "u":0.0495, "v":0.0045, "w":0.0090, "x":0.0045, "y":0.0045, "z":0.0090}

#    def split(self, word):
#        res = sorted(self.split1(word) + self.split2(word), reverse = True, key=lambda item: item[1])
#        return res
#
#    def split1(self, word):
#        res = list()
#        splits = [(word[:i], word[i:]) for i in range(1, len(word) + 1)]
#        for L, R in splits:
#            a = L+","+R
#            if len(L) > 0 and L in self.WORDS and len(R) > 0 and R in self.WORDS and a in self.bigram:
#                valid = list()
#                valid.append(L)
#                valid.append(R)
#                res.append((valid, self.bigram[a]))
#        return res
#
#    def split2(self, word):
#        res = list()
#        for i in range(len(word)+1):
#            for j in range(len(word)+1-i):
#                L = word[:i]
#                M = word[i:j]
#                R = word[j:]
#                a = L+","+M
#                b = M+","+R
#                if len(L) > 0 and L in self.WORDS and len(M) > 0 and M in self.WORDS and len(R) > 0 and R in self.WORDS:
#                    if a in self.bigram and b in self.bigram:
#                        valid = list()
#                        valid.append(L)
#                        valid.append(M)
#                        valid.append(R)
#                        res.append((valid, self.bigram[a]+self.bigram[b]))
#        return res

    def gcandidate(self, word):
        res = list()
        if word.isdigit():
            res.append((word, 1))
            return res
        vis = set()
        curr = ""
        self.backtrack(word, 0, res, 1, 2, curr, vis)
        res = sorted(res, reverse = True, key=lambda item: item[1])
        return res[:10]

    def backtrack(self, word, lens, res, score, edit, curr, vis):
        letters = 'abcdefghijklmnopqrstuvwxyz'
        if lens == len(word):
            if edit > 0:
                for c in letters:
                    if self.insertion[word[lens-1]][c] > 0:
                        self.backtrack(word, lens, res, score*self.insertion[word[lens-1]][c], edit-1, curr+c, vis)
            if curr in self.WORDS and curr not in vis:
                res.append((curr, score))
                vis.add(curr)
        elif edit == 0:
            if curr+word[lens:] in self.WORDS and curr+word[lens:] not in vis:
                res.append((curr+word[lens:], score))
                vis.add(curr+word[lens:])
        else:
            self.backtrack(word, lens+1, res, score*0.98, edit, curr+word[lens], vis)

            # check substitution
            for c in letters:
                if self.substitution[word[lens]][c] > 0:
                    self.backtrack(word, lens+1, res, score*self.substitution[word[lens]][c], edit-1, curr+c, vis)

            # check reversal
            if lens+1 < len(word) and self.reversal[word[lens]][word[lens+1]] > 0:
                self.backtrack(word, lens+2, res, score*self.reversal[word[lens]][word[lens+1]]*2, edit-1, curr+word[lens+1]+word[lens], vis)

            # check deletion
            if lens == 0:
                if self.deletion["@"][word[0]] > 0:
                    self.backtrack(word, lens+1, res, score*self.deletion["@"][word[0]], edit-1, curr, vis)
            else:
                if self.deletion[word[lens-1]][word[lens]] > 0:
                    self.backtrack(word, lens+1, res, score*self.deletion[word[lens-1]][word[lens]], edit-1, curr, vis)

            #check insertion
            for c in letters:
                if lens == 0:
                    if self.insertion["@"][c] > 0:
                        self.backtrack(word, lens, res, score*self.insertion["@"][c], edit-1, curr+c, vis)
                else:
                    if self.insertion[word[lens-1]][c] > 0:
                        self.backtrack(word, lens, res, score*self.insertion[word[lens-1]][c], edit-1, curr+c, vis)

    def correct(self, words, k):
        length = len(words)
        topk = list()
        for i in range(length):
#            split_candidates = self.split(words[i])
            split_candidates = self.getsplit(words[i])
            trans_candidates = self.gcandidate(words[i])
            merge = words[i]
            #check if we can merge couple words together
            queries = list()
            for j in range(i+1, length):
                merge += words[j]
                if merge in self.WORDS and i == 0:
                    topk.append(dict(sent = merge, prob = 0.9*(j-i+1), next = j+1, last = merge, res = merge))
                elif merge in self.WORDS:
                    for tups in topk:
                        if tups['next'] == i:
                            queries.append(dict(sent = tups['res'], prob = (tups['prob']+0.95*(j-i+1)), next = j+1, last = merge, res = (tups['res']+" "+merge)))
#                            if ke in self.bigram:
#                                tupcpy = copy.deepcopy(tups)
#                                tupcpy[0].append(merge)
#                                newtopk.append((tupcpy[0], tupcpy[1] + self.bigram[ke]+ 0.95*(j-i+1), j+1, tupcpy[3]+" "+merge))
#                            else:
#                                tupcpy = copy.deepcopy(tups)
#                                tupcpy[0].append(merge)
#                                newtopk.append((tupcpy[0], 0.0001 * (j - i +1) + tupcpy[1], j + 1, tupcpy[3]+" "+merge))
            
            # check splits and transformation
            for splitc in split_candidates:
                if i == 0:
                    topk.append(dict(sent = " ".join(splitc[0]), prob = splitc[1], next = i+1, last = splitc[0][-1], res = " ".join(splitc[0])))
                else:
                    for tups in topk:
                        if tups['next'] == i:
                            queries.append(dict(sent = (tups['res']+" "+" ".join(splitc[0][:-1])), prob = (tups['prob']+splitc[1]), next = i+1, last = splitc[-1], res = (tups['res']+" "+" ".join(splitc[0]))))
                            
#                            if ke in self.bigram:
#                                tupcpy = copy.deepcopy(tups)
#                                newtopk.append((tupcpy[0]+splitc[0], tupcpy[1]+self.bigram[ke]+splitc[1], i+1, tupcpy[3]+" "+" ".join(splitc[0])))
#                            else:
#                                tupcpy = copy.deepcopy(tups)
#                                newtopk.append((tupcpy[0] + splitc[0], tupcpy[1] + 0.0001 + splitc[1], i+1, tupcpy[3]+" "+" ".join(splitc[0])))
            for trans in trans_candidates:
                if i == 0 and trans[0] != '':
                    topk.append(dict(sent = trans[0], prob = trans[1], next = i+1, last = trans[0], res = trans[0]))
                elif trans[0] != '':
                    for tups in topk:
                        if tups['next'] == i:
                            queries.append(dict(sent = tups['res'], prob = (tups['prob']+trans[1]), next = i+1, last = trans[0], res = (tups['res']+" "+trans[0])))
#                            if ke in self.bigram:
#                                tupcpy = copy.deepcopy(tups)
#                                tupcpy[0].append(trans[0])
#                                newtopk.append((tupcpy[0], tupcpy[1]+self.bigram[ke]+trans[1], i+1, tupcpy[3]+" "+trans[0]))
#                            else:
#                                tupcpy = copy.deepcopy(tups)
#                                tupcpy[0].append(trans[0])
#                                newtopk.append((tupcpy[0], tupcpy[1] + 0.0001 + trans[1], i+1, tupcpy[3]+" "+trans[0]))
            if len(queries) > 0:
                topk += self.getbigram(queries)
            topk = sorted(topk, reverse = True, key=lambda item: item['prob'])
            topk = list(a for a in topk if a['next'] > i)[:k]
        res = list()
        for r in topk:
            res.append(r['res'])
        return res
        
    def getbigram(self, queries):
        dic = OrderedDict({'queries' : [{'words': query['sent'], 'word': query['last']} for query in queries]})
        data = json.dumps(dic)
        try:            
            self.conn.request("POST", "/text/weblm/v1.0/calculateConditionalProbability?%s" % self.params, data, self.headers)
#            print(data)
#            print(self.conn.getresponse().read().decode('utf8'))
            response = json.loads(self.conn.getresponse().read().decode('utf8'))['results']
            for i in range(len(response)):
                queries[i]['prob'] = queries[i]['prob'] + 2**float(response[i]['probability'])           
            return queries            
        except Exception as e:
            print("[Errno {0}] {1}".format(e.errno, e.strerror)) 
            
    def getsplit(self, text):
        params2 = urllib.parse.urlencode({
            # Request parameters
            'model': 'body',
            'text': text,
            'order': 5,
            'maxNumOfCandidatesReturned': 7,
        })
        try:
            self.conn.request("POST", "/text/weblm/v1.0/breakIntoWords?%s" % params2, "{body}", self.headers)
            response = json.loads(self.conn.getresponse().read().decode('utf8'))['candidates']
            res = list()
            for candi in response:
                wds = candi['words'].split(' ')
                if len(wds) > 1:
                    res.append((wds, 2**float(candi['probability'])))
            return res
        except Exception as e:
            print("[Errno {0}] {1}".format(e.errno, e.strerror))

if __name__ == "__main__":
    query = 'chester a arthur'
#    query = 'how to speel challange'
    queryChecker = QueryChecker('532b2cec37b643ce877268b4833da367')
    for correction in queryChecker.correct(query.split(" "), 7):
        print(correction)
    
